// <auto-generated />
using System;
using BelgianLeague.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BelgianLeague.Migrations
{
    [DbContext(typeof(BelgianLeagueDbContext))]
    [Migration("20240221142247_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BelgianLeague.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("LeagueNumber")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("BelgianLeague.Entities.MyTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MyTeams");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FirstTeamId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SecondTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstTeamId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SecondTeamId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateTo")
                        .HasColumnType("date");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScored")
                        .HasColumnType("int");

                    b.Property<int>("PointsPerMatch")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int?>("MyTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MyTeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BelgianLeague.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BelgianLeague.Entities.MyTeam", b =>
                {
                    b.HasOne("BelgianLeague.Entities.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Round", b =>
                {
                    b.HasOne("BelgianLeague.Entities.Team", "FirstTeam")
                        .WithMany()
                        .HasForeignKey("FirstTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelgianLeague.Entities.Season", "Season")
                        .WithMany("Rounds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelgianLeague.Entities.Team", "SecondTeam")
                        .WithMany()
                        .HasForeignKey("SecondTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstTeam");

                    b.Navigation("Season");

                    b.Navigation("SecondTeam");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Season", b =>
                {
                    b.HasOne("BelgianLeague.Entities.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Statistics", b =>
                {
                    b.HasOne("BelgianLeague.Entities.Team", "Team")
                        .WithMany("Statistics")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Team", b =>
                {
                    b.HasOne("BelgianLeague.Entities.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelgianLeague.Entities.MyTeam", null)
                        .WithMany("Team")
                        .HasForeignKey("MyTeamId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("BelgianLeague.Entities.League", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("BelgianLeague.Entities.MyTeam", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Season", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("BelgianLeague.Entities.Team", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("BelgianLeague.Entities.User", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
